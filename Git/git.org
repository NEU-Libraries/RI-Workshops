#+REVEAL_THEME: nu-library 
#+OPTIONS: toc:nil num:nil author:nil date:nil reveal_title_slide:nil 

* Git and GitHub 
  
  with Tom Hohenstein 

** Logistics 

   + Bathrooms
   + Internet 
   + Terminals ready? 
   + Other ... ? 

** Intentions 
   
   To give you a basic introduction to git and GitHub 

** Assumptions 

   + you have git installed
     (https://carpentries.github.io/workshop-template/#git) 
   + you have a GitHub account (https://github.com/) 

** Command-line interface (CLI)

   Read-Evaluate-Print Loop (REPL) 
   
   The user provides the computer a command. The computer reads it,
   executes it, and prints its output. 

   Git is most commonly used via the CLI 

** Why bother

#+REVEAL_HTML: <img src="http://swcarpentry.github.io/git-novice/fig/phd101212s.png" height=600 width=600>
#+REVEAL_HTML:

** Recording Changes 

#+REVEAL_HTML: <img src="http://swcarpentry.github.io/git-novice/fig/play-changes.svg">
#+REVEAL_HTML: <img src="http://swcarpentry.github.io/git-novice/fig/versions.svg" /> 


* Setup 

A little terminal magic
#+BEGIN_SRC unix  
PS1="$ " 
#+END_SRC

** Setting Up Git - user.name 

#+BEGIN_SRC unix  
git config --global user.name "Your name here"
#+END_SRC 

** Setting up Git - user.email 

#+BEGIN_SRC unix  
git config --global user.email "Your email here"
#+END_SRC 

** More options 

Visit: 
http://swcarpentry.github.io/git-novice/02-setup/index.html


* Getting Started 

** Let's 
+ Move to the desktop 
+ Make a directory called "planets" 
+ Move into planets
#+BEGIN_SRC unix  
cd ~/Desktop 
mkdir planets 
cd planets
#+END_SRC 

** Create a new repository 

#+BEGIN_SRC unix  
git init 
#+END_SRC 

** What happened? 

#+BEGIN_SRC unix  
ls -a 
#+END_SRC 

** What's our status 

#+BEGIN_SRC unix  
git status 
#+END_SRC 

** Check our location 

#+BEGIN_SRC unix  
pwd
#+END_SRC 
** Create mars.txt

#+BEGIN_SRC unix  
nano mars.txt
#+END_SRC 

Type 
"Cold and dry, but everything is my favorite color" 

** Leaving Nano 

^o (control-o) - write out the file 

^x (control-x - exit, will prompt to save) 

** Mars.txt 

#+BEGIN_SRC unix  
ls 
#+END_SRC 
and 
#+BEGIN_SRC unix  
cat mars.txt 
#+END_SRC 

** Check our status 

#+BEGIN_SRC unix  
git status 
#+END_SRC 

** Adding files 

#+BEGIN_SRC unix  
git add mars.txt 
#+END_SRC 

** Commit our file 

#+BEGIN_SRC unix  
git status 
#+END_SRC 

and 

#+BEGIN_SRC unix  
git commit -m "Start notes on Mars as a base" 
#+END_SRC 

** Check our status 

#+BEGIN_SRC unix  
git status 
#+END_SRC 

** git log 

#+BEGIN_SRC unix   
git log 
#+END_SRC 

** adding more text 
#+BEGIN_SRC unix   
nano mars.txt 
#+END_SRC 

Add "The two moons may be a problem for Wolfman" 

** git diff 

#+BEGIN_SRC unix   
git diff 
#+END_SRC 

** trying to commit 
#+BEGIN_SRC unix   
git commit -m "add concerns about Mars' moons on Wolfman" 
#+END_SRC 

** staging

Allows us to select files to add and commit together in logical stages 

#+BEGIN_SRC unix   
git add mars.txt 
#+END_SRC 

and then 

#+BEGIN_SRC unix   
git commit -m "add concerns about Mars' moons on Wolfman" 
#+END_SRC 


** add more text 
#+BEGIN_SRC unix   
nano mars.txt 
#+END_SRC 

Add "But the Mummy will appreciate the lack of humidity" 


** git add 

#+BEGIN_SRC unix   
git add mars.txt 
#+END_SRC 


** git diff and staging 
#+BEGIN_SRC unix   
git diff 
#+END_SRC 

and then 
#+BEGIN_SRC unix   
git diff --staged 
#+END_SRC 

finish with 
#+BEGIN_SRC unix   
git commit -m "add Mummy's concerns"  
#+END_SRC

** Logging options 

#+BEGIN_SRC unix   
git log --oneline --graph --all --decorate 
#+END_SRC 

** A note on directories 

Git doesn't track directories, only the files inside


* Exploring History  

25 minutes that I decided to skip. More information at: 
http://swcarpentry.github.io/git-novice/05-history/index.html


* Ignoring things

Use .gitignore to ignore files 

** Example 

#+BEGIN_SRC unix   
mkdir results
#+END_SRC 

and then 

#+BEGIN_SRC unix   
touch a.dat b.dat c.dat results/a.out results/b.out 
#+END_SRC 

check our work 
#+BEGIN_SRC unix   
ls -R 
git status 
#+END_SRC 

** creating gitignore

#+BEGIN_SRC unix   
nano .gitignore 
#+END_SRC 

in nano add text 

#+BEGIN_SRC unix   
*.dat
results/
#+END_SRC 

** check our work 

#+BEGIN_SRC unix   
ls -a 
#+END_SRC 

** and ... 

#+BEGIN_SRC unix   
git status 
#+END_SRC 

and 

#+BEGIN_SRC unix   
git add .gitignore 
git commit -m "ignore data files and the results folder." 
git status  
#+END_SRC 

** Gitignore won't ignore you 

#+BEGIN_SRC unix   
git add a.dat
#+END_SRC 

* Remotes in GitHub 

https://github.com/

** Creating a repo
#+REVEAL_HTML: <img src="http://swcarpentry.github.io/git-novice/fig/github-create-repo-02.png">

** Connecting the repo and folder

#+REVEAL_HTML: <img src="http://swcarpentry.github.io/git-novice/fig/github-find-repo-string.png">

#+BEGIN_SRC unix   
git remote add origin https://github.com/tomhohenstein/planets.git
#+END_SRC 

and to check 

#+BEGIN_SRC unix   
git remote -v 
#+END_SRC 

** origin nickname 

very common - I'd use it 

** push to our remote 

#+BEGIN_SRC unix   
git push origin master 
#+END_SRC 

** edit on github 

visit your repo online
https://github.com/tomhohenstein/planets

** add a line and commit 

** back to the terminal 

#+BEGIN_SRC unix   
cat mars.txt 
#+END_SRC 

** pull 

#+BEGIN_SRC unix   
git pull origin master 
#+END_SRC 


* Collaborating 

Visit 
https://public.etherpad-mozilla.org/p/git-workshop

and add your github username 

** Adding collaborators to your repo 

https://github.com/tomhohenstein/git-workshop



** Move to our desktop 

#+BEGIN_SRC unix   
cd ~/Desktop 
#+END_SRC 


** Clone a repo 

#+BEGIN_SRC unix   
git clone https://github.com/tomhohenstein/git-workshop.git
#+END_SRC 

** Move into the repo 

#+BEGIN_SRC unix   
cd git-workshop 
#+END_SRC 

and 

#+BEGIN_SRC unix   
git status
#+END_SRC 

** add a file 

#+BEGIN_SRC unix   
nano your_username.txt
#+END_SRC 
and 

#+BEGIN_SRC unix   
git add . 
git commit -m "adding my username file" 
#+END_SRC 

** push to origin 

#+BEGIN_SRC unix   
git push origin master
#+END_SRC 

** wait for minute 

#+BEGIN_SRC unix   
git pull origin master 
#+END_SRC 

** let's see our log 

#+BEGIN_SRC unix   
git log --online --graph --all --decorate
#+END_SRC 

* More to 

+ Conflicts
+ Branches 

and more at: 
https://git-scm.com/book/en/v2



